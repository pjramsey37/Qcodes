from qcodes import VisaInstrument, validators as vals

class Keithley_2280(VisaInstrument):
    """Driver class for a Keithley 2280 DC source"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, timeout=10, terminator='\r', **kwargs)

        # Parameters should be used for quantities and attributes with a single entry. To change a parameter, use parameter_name(new value) and the set_cmd will be sent to the
        # machine with the contents of the brackets replacing the {}. To find out the current value, use parameter_name(). This calls the get_cmd.

        ''' self.add_parameter('reset',
                            get_cmd='*RST',
                            docstring="Returns instrument to default settings, cancels pending"
                                      "commands, cancels response to previously recieved"
                                      "*OPC and *OPC? commands"
                            )
            self.add_parameter('trigger',
                          # get_cmd='*TRG',
                          # docstring="Generates a Trigger event."
                          # )
        '''

        self.add_parameter('function',
                           get_cmd=":SENS:FUNC?",
                           set_cmd=':SENS:FUNC {}')

        self.add_parameter('bright',
                           get_cmd=':DISP:BRIG?',
                           get_parser=int,
                           set_cmd=':DISP:BRIG {:.8f}',
                           label='Brightness',
                           unit='%',
                           vals=vals.Enum(*np.arange(0, 100.1, 1).tolist()),
                           docstring="Change the brightness of the display screen."
                                     "Values can be between 0 and 100"
                           )
        self.add_parameter('screen',
                           set_cmd='DISP:SCRE {}',
                           docstring="Change which screen is displayed. Home screen (HOME), "
                                     "Graph screen (GRAP), or data sheet Screen (DAT).")
        self.add_parameter('output',
                           set_cmd=':OUTP {:d}',
                           vals=vals.Numbers(0, 1),
                           docstring="Turn the output on (1) or off (0)",
                           )
        self.add_parameter('voltage',
                           get_cmd=':MEAS:VOLT?',
                           set_cmd=':SOUR:VOLT {}',
                           label='Voltage',
                           unit='V',
                           docstring="Measure the instantaneous voltage output."
                                     "Set the voltage level"
                           )
        self.add_parameter('current',
                           get_cmd=':MEAS:CURR?',
                           set_cmd=':CURR {}',
                           label='Current',
                           unit='A',
                           docstring="Measure the instantaneous current output."
                                     "Set the maximum current level"
                           )
        self.connect_message()

    def write_list(self, volt_list, curr_list, time_list, list_no = 1):
        """
        Creates a list of states for the 2280 to occupy. 
        volt_list: list of voltages
        curr_list: list of currents
        time_list: list of dwell times (the amount of time the 2280 remains at the corresponding voltage and current)
        list_no: number of the list you want to write to. Default 1, options 1, 2, 3, 4, 5, 6, 7, 8, 9.
        """
        self.write(':LIST{}:CURR "{}"'.format(list_no, ','.join(curr_list)))
        self.write(':LIST{}:VOLT "{}"'.format(list_no, ','.join(volt_list)))
        self.write(':LIST{}:DWEL "{}"'.format(list_no, ','.join(time_list)))
        self.write(':LIST:SAVE:INT {}'.format(list_no))
    
    def add_to_list(self, volt_list, curr_list, time_list, list_no = 1):
        """
        Creates a list of states for the 2280 to occupy. 
        volt_list: list of voltages
        curr_list: list of currents
        time_list: list of dwell times (the amount of time the 2280 remains at the corresponding voltage and current)
        list_no: number of the list you want to write to. Default 1, options 1, 2, 3, 4, 5, 6, 7, 8, 9.
        """
        self.write(':LIST{}:CURR:APP "{}"'.format(list_no, ','.join(curr_list)))
        self.write(':LIST{}:VOLT:APP "{}"'.format(list_no, ','.join(volt_list)))
        self.write(':LIST{}:DWEL:APP "{}"'.format(list_no, ','.join(time_list)))
    
    def load_list(self, list_no = 1):
        self.write(f':LIST:RCL {list_no}')
